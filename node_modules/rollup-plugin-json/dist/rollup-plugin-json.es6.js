import { makeLegalIdentifier, createFilter } from 'rollup-pluginutils';

function json() {
	var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	var filter = createFilter(options.include, options.exclude);

	return {
		transform: function transform(json, id) {
			if (id.slice(-5) !== '.json') return null;
			if (!filter(id)) return null;

			var code = undefined;
			var ast = {
				type: 'Program',
				sourceType: 'module',
				start: 0,
				end: null,
				body: []
			};

			if (json[0] !== '{') {
				code = 'export default ' + json + ';';

				ast.body.push({
					type: 'ExportDefaultDeclaration',
					start: 0,
					end: code.length,
					declaration: {
						type: 'Literal',
						start: 15,
						end: code.length - 1,
						value: null,
						raw: 'null'
					}
				});
			} else {
				(function () {
					var data = JSON.parse(json);

					var validKeys = [];
					var invalidKeys = [];

					Object.keys(data).forEach(function (key) {
						if (key === makeLegalIdentifier(key)) {
							validKeys.push(key);
						} else {
							invalidKeys.push(key);
						}
					});

					var char = 0;
					var namedExports = validKeys.map(function (key) {
						var declaration = 'export var ' + key + ' = ' + JSON.stringify(data[key]) + ';';

						// generate fake AST node while we're here
						ast.body.push({
							type: 'ExportNamedDeclaration',
							start: char,
							end: declaration.length,
							declaration: {
								type: 'VariableDeclaration',
								start: char + 7,
								end: declaration.length,
								declarations: [{
									type: 'VariableDeclarator',
									start: char + 11,
									end: declaration.length - 1,
									id: {
										type: 'Identifier',
										start: char + 11,
										end: char + 11 + key.length,
										name: key
									},
									init: {
										type: 'Literal',
										start: char + 11 + key.length + 3,
										end: declaration.length - 1,
										value: null,
										raw: 'null'
									}
								}],
								kind: 'var'
							},
							specifiers: [],
							source: null
						});

						char += declaration.length + 1;
						return declaration;
					});

					var defaultExportNode = {
						type: 'ExportDefaultDeclaration',
						start: char,
						end: null,
						declaration: {
							type: 'ObjectExpression',
							start: char + 15,
							end: null,
							properties: []
						}
					};

					char += 18; // 'export default {\n\t'.length'

					var defaultExportRows = validKeys.map(function (key) {
						var row = key + ': ' + key;

						defaultExportNode.declaration.properties.push({
							type: 'Property',
							start: char,
							end: char + row.length,
							method: false,
							shorthand: false,
							computed: false,
							key: {
								type: 'Identifier',
								start: char,
								end: key.length,
								name: key
							},
							value: {
								type: 'Identifier',
								start: char + key.length + 2,
								end: char + row.length,
								name: key
							},
							kind: 'init'
						});

						char += row.length + 3; // ',\n\t'.length

						return row;
					}).concat(invalidKeys.map(function (key) {
						return '"' + key + '": ' + JSON.stringify(data[key]);
					}));

					var defaultExportString = 'export default {\n\t' + defaultExportRows.join(',\n\t') + '\n};';

					ast.body.push(defaultExportNode);
					code = namedExports.join('\n') + '\n' + defaultExportString;

					defaultExportNode.end = defaultExportNode.declaration.end = code.length - 1;
				})();
			}

			ast.end = code.length;

			return { ast: ast, code: code, map: { mappings: '' } };
		}
	};
}

export default json;
//# sourceMappingURL=rollup-plugin-json.es6.js.map